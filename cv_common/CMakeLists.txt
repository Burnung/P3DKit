project(cv_common)
file(GLOB CV_COMMON_SRC "*.h" "*.cpp")
find_package(OpenCV REQUIRED)
IF(BUILD_PUBS_FOR_RELEASE)
    add_definitions(-DCVUTILS_BUILD_PUBS_FOR_RELEASE)
ENDIF()
IF(IS_IOS)
    add_library(${PROJECT_NAME} ${CV_COMMON_SRC})
    target_link_libraries(${PROJECT_NAME} common)
    target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/../libs/opencv/lib/ios/3.1.0/OpenCV2/opencv2.framework)
ELSE()
    IF(IS_ANDROID)
        add_library(${PROJECT_NAME} CvUtil.h CvUtil.cpp)
        target_link_libraries(${PROJECT_NAME} common ${OpenCV_LIBS})
        # target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/../libs/opencv/lib/android)
        # file(GLOB ANDROID_CV_LIB "${PROJECT_SOURCE_DIR}/../libs/opencv/lib/android/sdk/native/libs/armeabi-v7a/*.a" 
        #     "${PROJECT_SOURCE_DIR}/../libs/opencv/lib/android/sdk/native/3rdparty/libs/armeabi-v7a/*.a")
        # target_link_libraries(${PROJECT_NAME} ${ANDROID_CV_LIB})
    ELSE()
        add_library(${PROJECT_NAME} ${CV_COMMON_SRC})
        target_link_libraries(${PROJECT_NAME} common)
        target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBS})
    ENDIF()
ENDIF()
target_include_directories(${PROJECT_NAME} INTERFACE ${PROJECT_SOURCE_DIR} ${OPENCV_INCLUDE_DIRS})
